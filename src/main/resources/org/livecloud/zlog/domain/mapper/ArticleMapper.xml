<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.livecloud.zlog.domain.mapper.ArticleMapper">
  <resultMap type="Article" id="articleResultMap">
    <id property="id" column="art_id" />
    <result property="title" column="art_title" />
    <result property="content" column="art_content" />
    <result property="pv" column="art_pv" />
    <result property="createdDate" column="art_created_date"
      jdbcType="TIMESTAMP" javaType="java.sql.Timestamp" />
    <result property="modifiedDate" column="art_modified_date"
      jdbcType="TIMESTAMP" javaType="java.sql.Timestamp" />
    <result property="excerpt" column="art_excerpt" />
    <result property="name" column="art_name" />
    <result property="commentCount" column="art_comment_count" />
    <result property="articleStatus" column="art_article_status" />
    <result property="commentStatus" column="art_comment_status" />
    <result property="tagStrings" column="art_tag_string" />
    <association property="user" column="art_user" javaType="User"
      resultMap="userResult" />
    <association property="category" column="art_category"
      javaType="Category" resultMap="categoryResult" />
    <collection property="comments" ofType="Comment"
      resultMap="commentResultMap" />
  </resultMap>

  <resultMap id="userResult" type="User">
    <id property="id" column="user_id" />
    <result property="name" column="user_name" />
  </resultMap>

  <resultMap id="categoryResult" type="Category">
    <id property="id" column="cate_id" />
    <result property="name" column="cate_name" />
    <result property="intro" column="cate_intro" />
  </resultMap>

  <resultMap id="commentResultMap" type="Comment">
    <id property="id" column="comm_id" />
    <result property="author" column="comm_author" />
    <result property="content" column="comm_content" />
  </resultMap>

  <select id="getArticlesByCategory" resultMap="articleResultMap">
    SELECT
    <include
      refid="org.livecloud.zlog.domain.mapper.Common.selectArticleColumns" />
    FROM `article` A
    LEFT OUTER JOIN `category` C ON A.category=C.id
    LEFT
    OUTER JOIN `user` U ON A.user=U.id
    WHERE C.name=#{enName}
  </select>

  <select id="getAllArticles" resultMap="articleResultMap">
    SELECT
    <include
      refid="org.livecloud.zlog.domain.mapper.Common.selectArticleColumns" />
    FROM `article` A
    LEFT OUTER JOIN `category` C ON A.category=C.id
    LEFT
    OUTER JOIN `user` U ON A.user=U.id
    ORDER BY A.created_date DESC
  </select>

  <select id="getArticlesByCreatedDate" resultMap="articleResultMap">
    SELECT
    <include
      refid="org.livecloud.zlog.domain.mapper.Common.selectArticleColumns" />
    FROM `article` A
    LEFT OUTER JOIN `category` C ON A.category=C.id
    LEFT
    OUTER JOIN `user` U ON A.user=U.id
    ORDER BY A.created_date DESC
  </select>

  <select id="getArticlesByPV" resultMap="articleResultMap">
    SELECT
    <include
      refid="org.livecloud.zlog.domain.mapper.Common.selectArticleColumns" />
    FROM `article` A
    LEFT OUTER JOIN `category` C ON A.category=C.id
    LEFT
    OUTER JOIN `user` U ON A.user=U.id
    ORDER BY A.pv DESC
  </select>

  <select id="getArticle" resultMap="articleResultMap">
    SELECT
    <include
      refid="org.livecloud.zlog.domain.mapper.Common.selectArticleColumns" />
    FROM `article` A
    LEFT OUTER JOIN `category` C ON A.category=C.id
    LEFT
    OUTER JOIN `user` U ON A.user=U.id
    WHERE A.id=#{id}
    ORDER BY
    A.created_date DESC
  </select>

  <select id="getPrevArticles" resultMap="articleResultMap">
    SELECT
    <include
      refid="org.livecloud.zlog.domain.mapper.Common.selectArticleColumns" />
    FROM `article` A
    LEFT OUTER JOIN `category` C ON
    A.category=C.id
    LEFT
    OUTER JOIN `user` U ON
    A.user=U.id
    WHERE A.created_date &lt; #{now}
    ORDER BY A.created_date DESC,
    A.id DESC
  </select>

  <select id="getNextArticles" resultMap="articleResultMap">
    SELECT
    <include
      refid="org.livecloud.zlog.domain.mapper.Common.selectArticleColumns" />
    FROM `article` A
    LEFT OUTER JOIN `category` C ON
    A.category=C.id
    LEFT
    OUTER JOIN `user` U ON
    A.user=U.id
    WHERE A.created_date &gt; #{now}
    ORDER BY A.created_date ASC,
    A.id ASC
  </select>

  <select id="getArticlesInSameTag" resultMap="articleResultMap">
    SELECT DISTINCT
    <include
      refid="org.livecloud.zlog.domain.mapper.Common.selectArticleColumns" />
    FROM `article` A
    LEFT OUTER JOIN `category` C ON
    A.category=C.id
    LEFT
    OUTER JOIN `user` U ON
    A.user=U.id
    INNER JOIN `tag` T
    WHERE A.id !=
    #{myid} AND
    T.id in
    (SELECT T.id FROM `article_tag` T WHERE T.id =
    #{myid})
  </select>

  <select id="getArticlesByTags" resultMap="articleResultMap">
    SELECT DISTINCT
    <include
      refid="org.livecloud.zlog.domain.mapper.Common.selectArticleColumns" />
    FROM `article` A
    LEFT OUTER JOIN `category` C ON A.category=C.id
    LEFT
    OUTER JOIN `user` U ON A.user=U.id
    LEFT OUTER JOIN `article_tag` AT
    ON AT.art_id=A.id
    LEFT OUTER JOIN `tag` T ON AT.tag_id=T.id
    WHERE
    T.name = #{tagValue}
  </select>

  <update id="updatePV">
    UPDATE `article`
    SET
    pv = #{pv}
    where id = #{id}
  </update>

  <select id="getCount" resultType="long">
    SELECT
    COUNT(*)
    FROM
    `article`
  </select>

  <insert id="addArticle" parameterType="Article">
    INSERT INTO
    `article`(title, content, pv, created_date, modified_date, excerpt, 
    name, comment_count, comment_status, tag_string, user,category)
    VALUES(#{title}, #{content}, #{pv}, #{created_date}, #{modified_date},
    #{excerpt}, #{name}, #{comment_count}, #{comment_status}, #{tag_string},
    #{user.id}, #{category.id})
  </insert>

  <update id="updateArticle" parameterType="Article">
    UPDATE
    `article`
    SET
    title=#{title}, content=#{content}, pv=#{pv}, created_date=#{created_date}, 
    modified_date=#{modified_date}, excerpt=#{excerpt}, name=#{name}, 
    comment_count=#{comment_count}, comment_status=#{comment_status}, 
    tag_string=#{tag_string}, user=#{user.id}, category=#{category.id}
  </update>

  <delete id="deleteArticle" parameterType="long">
    DELETE FROM
    `article`
    WHERE id=#{id}
  </delete>

  <select id="count" resultType="long">
    SELECT COUNT(*) FROM `article`
  </select>

</mapper>